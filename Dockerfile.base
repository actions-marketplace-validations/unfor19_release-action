ARG ALPINE_VERSION="3.13"
ARG LANG_IMAGE=""

# downloads
ARG GITHUB_CLI_VERSION="1.11.0"
ARG CURL_VERSION="7.77.0"
ARG JQ_VERSION="1.6"

# base
ARG BASH_VERSION="5.1"
ARG BUILD_BASE_VERSION="0.5"
ARG GIT_VERSION="2.30"
ARG LIBSTD_CPP_VERSION="10.2"
ARG OPENSSH_VERSION="8.4"
ARG UTIL_LINUX_VERSION="2.36"
ARG ZIP_VERSION="3.0"


### Downloads Stage
FROM alpine:${ALPINE_VERSION} as downloads

WORKDIR /tmp/downloads
RUN mkdir -p ./binaries

ARG GITHUB_CLI_VERSION
RUN wget -q -O ./gh.tar.gz "https://github.com/cli/cli/releases/download/v${GITHUB_CLI_VERSION}/gh_${GITHUB_CLI_VERSION}_linux_386.tar.gz" && \
    tar -xzf ./gh.tar.gz && \
    mv ./"gh_${GITHUB_CLI_VERSION}_linux_386/bin/gh" ./binaries/gh
ARG CURL_VERSION
RUN wget -q -O ./binaries/curl "https://github.com/moparisthebest/static-curl/releases/download/v${CURL_VERSION}/curl-amd64"
ARG JQ_VERSION
RUN wget -q -O ./binaries/jq "https://github.com/stedolan/jq/releases/download/jq-${JQ_VERSION}/jq-linux64"
# Output binaries: /tmp/downloads/


### Base Stage
FROM ${LANG_IMAGE} as base

WORKDIR /tmp/binaries
COPY --from=downloads /tmp/downloads/binaries/* ./
RUN chmod +x ./* && \
    mv ./* /usr/local/bin/

ARG BASH_VERSION
ARG BUILD_BASE_VERSION
ARG GIT_VERSION
ARG LIBSTD_CPP_VERSION
ARG OPENSSH_VERSION
ARG UTIL_LINUX_VERSION
ARG ZIP_VERSION
RUN apk --update add \
    bash=~"${BASH_VERSION}" \
    build-base=~"${BUILD_BASE_VERSION}" \
    ca-certificates \
    libstdc++=~"${LIBSTD_CPP_VERSION}" \
    git=~"${GIT_VERSION}" \
    openssh=~"${OPENSSH_VERSION}" \
    tzdata \
    util-linux=~"${UTIL_LINUX_VERSION}" \
    zip=~"${ZIP_VERSION}" && \
    rm -rf /var/lib/apt/lists/* && \
    rm /var/cache/apk/*
WORKDIR /code/